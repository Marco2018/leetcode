class Solution:    def minMalwareSpread(self, graph, initial):        """        :type graph: List[List[int]]        :type initial: List[int]        :rtype: int        """        self.rank = [1] * len(graph)        self.parents = [i for i in range(len(graph))]        for i in range(len(graph)):            for j in range(i, len(graph)):                if graph[i][j] == 1:                    self.union(i, j)        topList = [0] * len(graph)        initial.sort()        max_num = 0        for i in initial:            topList[i] = self.rank[self.find(i)]            max_num = max(max_num, topList[i])        for i in initial:            if topList[i] == max_num:                return i    def union(self, i, j):        p1, p2 = self.find(i), self.find(j)        if p1 == p2:            return        if self.rank[p1] < self.rank[p2]:            p1, p2 = p2, p1        self.rank[p1] += self.rank[p2]        self.parents[p2] = p1    def find(self, i):        if i != self.parents[i]:            self.parents[i] = self.find(self.parents[i])        return self.parents[i]s=Solution()graph = [[1,1,0],[1,1,0],[0,0,1]]initial = [0,1,2]print(s.minMalwareSpread(graph,initial))