class Solution:    def solveNQueens(self, n):        """        :type n: int        :rtype: List[List[str]]        """        def check(queen,i,j,row,col,n):            #col            for a in range(i):                if queen[a][j]=="Q":                    return False            #45            a,b=i-1,j+1            while a>=0 and b<n:                if queen[a][b]=="Q":                    return False                a-=1                b+=1            #135            a,b=i-1,j-1            while a>=0 and b>=0:                if queen[a][b]=="Q":                    return False                a-=1                b-=1            return True        def placequeen(res,queen,row,col,index,n):            if index==n:                queen2=[]                for i in range(n):                    string="".join(x for x in queen[i])                    queen2.append(string)                res.append(queen2)            for i in range(col):                if check(queen,index,i,row,col,n):                    queen[index][i]="Q"                    placequeen(res,queen,row,col,index+1,n)                    queen[index][i]="."            return        queen=[["." for i in range(n)]for i in range(n)]        res=[]        placequeen(res,queen,n,n,0,n)        return ress=Solution()print(s.solveNQueens(4))#classic back track