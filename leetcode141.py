# Definition for singly-linked list.# class ListNode(object):#     def __init__(self, x):#         self.val = x#         self.next = Noneclass Solution(object):    def hasCycle(self, head):        """        :type head: ListNode        :rtype: bool        """        if head==None:            return False        slow,fast=head,head        while fast.next!=None and fast.next.next!=None:            fast=fast.next.next            slow=slow.next            if fast==slow:                return True        return Falses=Solution()head1,head2,head3,head4,head5,head6=ListNode(1),ListNode(2),ListNode(3),ListNode(4),ListNode(5),ListNode(6)head1.next=head2head2.next=head3head3.next=head4head4.next=head5head5.next=head6k=3print(s.removeElements(head1,k))