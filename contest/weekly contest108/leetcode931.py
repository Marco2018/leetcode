class Solution:    def minFallingPathSum(self, A):        """        :type A: List[List[int]]        :rtype: int        """        if len(A)==0 or len(A[0])==0:            return 0        n,m=len(A),len(A[0])        if n==1:            return min(A[0])        if m==1:            res=0            for i in range(n):                res+=A[i][0]            return res        dp=[[0 for i in range(m)]for j in range(n+1)]        for i in range(1,n+1,1):            for j in range(m):                if j==0:                    dp[i][j]=min(dp[i-1][j],dp[i-1][j+1])+A[i-1][j]                elif j==m-1:                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j -1]) + A[i-1][j]                else:                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1],dp[i-1][j+1]) + A[i-1][j]        return min(dp[n])s=Solution()N=5print(s.beautifulArray(N))