from math import sqrtclass Solution:    def countPrimes(self, n):        """        :type n: int        :rtype: int        """        if n <= 2:            # 0 and 1 are not prime number.            return 0        # s[i] (i = 0, 1, ..., n - 1) = the flag of i being prime.        s = [1] * n        s[0] = 0        s[1] = 0        # Set the multiples of i to non-prime. A couple of optimizations here:        # (1) The smallest prime factor of a non-prime is at most int(sqrt(n)).        # (2) If i is already marked as non-prime, its multipliers must have        # already been marked as non-prime when we processed the smallest prime        # factor of i.        # (3) If i is a prime, then s[i * j] for all j < i must have already been        # marked as non-prime, so we start from i * i.        for i in range(2, int(sqrt(n)) + 1):            if s[i] == 1:                # Use slicing to speed up the zero assignments.                s[i * i:n:i] = [0] * int((n - 1 - i * i) / i + 1)        return sum(s)s = Solution()n=10print(s.countPrimes(n))