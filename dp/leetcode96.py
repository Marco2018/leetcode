class Solution:    def numTrees(self, n):        """        :type n: int        :rtype: int        """        dp=[0 for i in range(n+1)]        dp[0]=1        for i in range(1,n+1,1):            for j in range(i):                dp[i]+=dp[j]*dp[i-1-j]        return dp[n]s=Solution()n=3print(s.numTrees(n))Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?