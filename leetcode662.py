# Definition for a binary tree node.class TreeNode:     def __init__(self, x):         self.val = x         self.left = None         self.right = Nonefrom collections import dequeclass Solution:    def widthOfBinaryTree(self, root):        """        :type root: TreeNode        :rtype: int        """        res,res_numbers,line1,line2=0,[],deque(),deque()        if not root:            return 0        index=1        line1.append([root,index])        res=1        while line1 or line2:            while line1:                temp,index=line1[0][0],line1[0][1]                line1.popleft()                if temp.left:                    line2.append([temp.left,index*2])                    res_numbers.append(index*2)                if temp.right:                    line2.append([temp.right,index*2+1])                    res_numbers.append(index*2+1)            line1=line2.copy()            line2.clear()            if res_numbers:                res = max(res, res_numbers[-1] - res_numbers[0] + 1)                res_numbers.clear()        return ress=Solution()root=TreeNode(1)root.left=TreeNode(3)root.right=TreeNode(2)root.left.left=TreeNode(5)root.left.right=TreeNode(3)root.right.right=TreeNode(9)print(s.widthOfBinaryTree(root))