from collections import defaultdictimport copyclass Solution:    def init(self, root):        if root.left == None and root.right == None:            self.isleaf[root.val] = 1        else:            self.isleaf[root.val] = 0        if root.left:            self.graph[root.val].append(root.left.val)            self.graph[root.left.val].append(root.val)            self.init(root.left)        if root.right:            self.graph[root.val].append(root.right.val)            self.graph[root.right.val].append(root.val)            self.init(root.right)        return    def findClosestLeaf(self, root, target):        self.isleaf = {}        self.graph = defaultdict(list)        seen = set()        seen.add(target)        self.init(root)        if not root:            return -1        level, next_level = [target], []        while level or next_level:            while level:                node = level.pop()                if self.isleaf[node] == 1:                    return node                for item in self.graph[node]:                    if item not in seen:                        next_level.append(item)                        seen.add(item)            level = copy.deepcopy(next_level)            next_level = []        return -1