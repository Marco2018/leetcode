import collectionsclass Solution:    def depth(self, node, parent, graph):        d1 = d2 = 0        for nei in graph[node]:            if nei != parent:                d = self.depth(nei, node, graph)                if d > d1:                    d1, d2 = d, d1                elif d > d2:                    d2 = d                self.diameter = max(self.diameter, d1 + d2)        return d1 + 1    def treeDiameter(self, edges):        n = len(edges) + 1        self.diameter = 0        graph = collections.defaultdict(set)        for a, b in edges:            graph[a].add(b)            graph[b].add(a)        self.depth(0, None, graph)        return self.diameters1 = Solution()edges = [[0,1],[0,2]]print(s1.treeDiameter(edges))