class Solution(object):    def decodeString(self, s):        """        :type s: str        :rtype: str        """        n=len(s)        stack=[]        for i in range(n):            if s[i]=="]":                cur=""                while stack[-1]!="[":                    chr=stack.pop()                    cur=chr+cur                stack.pop()                mul=""                while stack and stack[-1].isdigit():                    mul=stack.pop()+mul                stack.append(int(mul)*cur)            else:                stack.append(s[i])        return "".join(stack)s=Solution()str1="3[a]2[bc]"print(s.decodeString(str1))"""TLE:class Solution(object):    def longestValidParentheses(self, s):        n=len(s)        ans=0        i=0        while i<n:            if s[i]=="(":                start=i                temp=0                while start<n:                    if s[start]=="(":                        temp+=1                    elif s[start]==")":                        temp-=1                    if temp==0:                        ans=max(ans,start-i+1)                    if temp<0:                        i=start                        break                    start+=1            i+=1        return ans"""