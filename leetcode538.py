# Definition for a binary tree node.class TreeNode(object):     def __init__(self, x):         self.val = x         self.left = None         self.right = Noneclass Solution(object):    def convertBST(self, root):        """        :type root: TreeNode        :rtype: TreeNode        """        self.nums=[]        self.s=0        def helper_nums(root):            if not root:                return            helper_nums(root.left)            self.nums.append(root.val)            helper_nums(root.right)            return        def helper_tree(root):            if not root:                return            helper_tree(root.right)            self.s+=self.nums.pop()            root.val=self.s            helper_tree(root.left)            return        helper_nums(root)        self.nums.sort()        helper_tree(root)        return roots=Solution()root=TreeNode(2)root.left=TreeNode(0)root.right=TreeNode(3)root.left.left=TreeNode(-4)root.left.right=TreeNode(-1)print(s.convertBST(root))#利用BST的性质不然每次找比root.val大的数字 复杂度比较高