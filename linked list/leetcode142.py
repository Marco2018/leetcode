# Definition for singly-linked list.# class ListNode(object):#     def __init__(self, x):#         self.val = x#         self.next = Noneclass Solution(object):    def detectCycle(self, head):        """        :type head: ListNode        :rtype: ListNode        """        if not head:            return        iscircle=0        fast=slow=head        while fast and fast.next:            fast=fast.next.next            slow=slow.next            if fast==slow:                iscircle=1                break        if iscircle==0:            return        first=head        while first!=slow:            first=first.next            slow=slow.next        return firstfast slow两个node 如果重复则会出现circle假设从0开始 begin circle在k处，最后一个点为n则fast和slow重叠在x处：x-k=2x-n-1x=n+1-k从x到k：n+1-x=k