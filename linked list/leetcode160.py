# Definition for singly-linked list.# class ListNode(object):#     def __init__(self, x):#         self.val = x#         self.next = Noneclass Solution(object):    def getIntersectionNode(self, headA, headB):        """        :type head1, head1: ListNode        :rtype: ListNode        """        if not headA or not headB:            return None        p, q = headA, headB        while p and q and p != q:            p = p.next            q = q.next            if p == q:                return q            if not p:                p = headB            if not q:                q = headA        return ps = Solution()print(s.countPrimes(n))#对于两个不知道长度的link而言求公共点#困难在于不知道是让p=p.next还是q=q.next#同时因为不知道qp的长度 所以考虑两个不一样长的问题#一种方法是统计二者的长度 然后把长的link之前的部分先减去或者使用循环 但是注意 p = headB  q = headA 不然会超时