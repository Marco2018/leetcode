import collectionsclass Solution(object):    def findAnagrams(self, s, p):        """        :type s: str        :type p: str        :rtype: List[int]        """        res = []        length = len(p)        dic_p = collections.Counter(p)        dic_s = collections.Counter(s[:length])        prev = dic_p == dic_s        if prev:            res.append(0)        for i in range(1,len(s)-length+1):            if s[i-1] == s[i+length-1]:                if prev:                    res.append(i)            else:                old_char = s[i-1]                dic_s[old_char] -= 1                if dic_s[old_char] == 0:                    del dic_s[old_char]                new_char = s[i+length-1]                if new_char in dic_s:                    dic_s[new_char] += 1                else:                    dic_s[new_char] = 1                prev = dic_s == dic_p                if prev:                    res.append(i)        return res"""class Solution:    def findAnagrams(self, s, p):        def isana(s,p):            dict1,dict2={},{}            for i in range(len(s)):                if s[i] not in dict1:                    dict1[s[i]]=1                else:                    dict1[s[i]]+=1                if p[i] not in dict2:                    dict2[p[i]]=1                else:                    dict2[p[i]]+=1            return dict1==dict2        ans=[]        for i in range(len(s)-len(p)+1):            if isana(s[i:i+len(p)],p):                ans.append(i)        return ans    time limited"""s1="abab"p="ab"s=Solution()print(s.findAnagrams(s1,p))