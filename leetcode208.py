from collections import defaultdictclass TrieNode:    def __init__(self):        self.children = defaultdict(TrieNode)        self.isword = False		class Trie:    def __init__(self):        """        Initialize your data structure here.        """        self.root = TrieNode()    def insert(self, word):        """        Inserts a word into the trie.        :type word: str        :rtype: void        """        cur = self.root        for letter in word:            cur = cur.children[letter]        cur.isword = True    def search(self, word):        """        Returns if the word is in the trie.        :type word: str        :rtype: bool        """        cur = self.root        for letter in word:            if letter in cur.children:                cur = cur.children[letter]            else:                return False        return cur.isword    def startsWith(self, prefix):        """        Returns if there is any word in the trie that starts with the given prefix.        :type prefix: str        :rtype: bool        """        cur = self.root        for letter in prefix:            if letter in cur.children:                cur = cur.children[letter]            else:                return False        return True# Your Trie object will be instantiated and called as such:# obj = Trie()# obj.insert(word)# param_2 = obj.search(word)# param_3 = obj.startsWith(prefix)