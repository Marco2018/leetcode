from collections import dequeclass Solution(object):    def shortestSubarray(self, A, K):        """        :type A: List[int]        :type K: int        :rtype: int        """        n=len(A)        B=[0 for i in range(n+1)]        for i in range(1,n+1):            B[i]=B[i-1]+A[i-1]        queue1=deque()        queue1.append([0,0])        res=n+1        for i in range(1,n+1):            while queue1 and B[i]-queue1[0][0]>=K:                res=min(res,i-queue1[0][1])                queue1.popleft()            while queue1 and queue1[-1][0]>=B[i]:                queue1.pop()            queue1.append([B[i],i])        if res<=n:            return res        return -1s=Solution()A=[84,-37,32,40,95]K=167print(s.shortestSubarray(A,K))#deque pop() 删除最右边的元素 popleft()删除最左边的元素#对于子串和的问题转化为sum[i]能够很大程度上减少运算#使用stack deque数据结构