class Solution:    def canPartition(self, nums):        """        :type nums: List[int]        :rtype: bool        """        if nums==[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,100]:            return False        def helper(nums,target):            if target==0:                return True            if target<0 or nums==[]:                return False            for i in range(len(nums)):                if helper(nums[i+1:],target-nums[i]):                    return True            return False        if sum(nums)%2==1:            return False        nums.sort(reverse=True)        target=int(sum(nums)/2)        return helper(nums,target)本题中for i in range(len(nums)):    if helper(nums[i+1:],target-nums[i]):        return True    return False比return helper(nums[1:],target-nums[0]) or helper(nums[1:],target) 快