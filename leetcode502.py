import heapqclass Node:    def __init__(self,profit,capital):        self.profit=profit        self.capital=capitalclass Solution:    def findMaximizedCapital(self, k, W, Profits, Capital):        n=len(Capital)        nodes,heap=[],[]        for i in range(n):            nodes.append(Node(Profits[i],Capital[i]))        nodes.sort(key=lambda x:x.capital)        i=0        while k:            while i<n and nodes[i].capital<=W:                heapq.heappush(heap,-nodes[i].profit)                i+=1            if heap:                W-=heapq.heappop(heap)            k-=1        return Ws=Solution()k=10W=0Profits=[1,2,3]Capital=[0,1,1]print(s.findMaximizedCapital(k,W,Profits,Capital))"""from functools import cmp_to_keyclass Node:    def __init__(self,profit,capital,isvisited):        self.profit=profit        self.capital=capital        self.isvisited=isvisitedclass Solution:    def findMaximizedCapital(self, k, W, Profits, Capital):        def cmp(x,y):            if x.isvisited!=y.isvisited:                return x.isvisited-y.isvisited            elif (x.capital<=W)!=(y.capital<=W):                return -(x.capital<=W)+(y.capital<=W)            return y.profit-x.profit        n=len(Capital)        nodes=[]        for i in range(n):            nodes.append(Node(Profits[i],Capital[i],0))        while k:            nodes.sort(key=cmp_to_key(cmp))            if nodes[0].capital<=W:                W+=nodes[0].profit                nodes[0].isvisited=1                k-=1            else:                break        return W"""