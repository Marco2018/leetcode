class Solution:    def longestIncreasingPath(self, matrix) -> int:        def dfs(dp, matrix, i, j, n, m):            if dp[i][j] != 1:                return dp[i][j]            direct = [[-1, 0], [1, 0], [0, -1], [0, 1]]            for ii, jj in direct:                if i + ii < 0 or i + ii >= n or j + jj < 0 or j + jj >= m:                    continue                if matrix[i + ii][j + jj] > matrix[i][j]:                    dp[i][j] = max(dp[i][j], 1 + dfs(dp, matrix, i+ii, j+jj, n, m))            self.res = max(self.res, dp[i][j])            return dp[i][j]        if not matrix or len(matrix[0]) == 0:            return 0        self.res = 0        n, m = len(matrix), len(matrix[0])        dp = [[1 for i in range(m)] for j in range(n)]        for i in range(n):            for j in range(m):                dfs(dp, matrix, i, j, n, m)        return self.res