class Solution:    def surfaceArea(self, grid):        """        :type grid: List[List[int]]        :rtype: int        """        def around(grid,col,row,n):            temp=0            if col-1>=0:                temp+=min(grid[col][row],grid[col-1][row])            if row-1>=0:                temp+=min(grid[col][row],grid[col][row-1])            if col+1<n:                temp+=min(grid[col][row],grid[col+1][row])            if row+1<n:                temp+=min(grid[col][row],grid[col][row+1])            return temp        if not grid:            return 0        sum1,a,b=0,0,0        n=len(grid)        for i in range(n):            for j in range(n):                sum1+=grid[i][j]                a+=max(0,grid[i][j]-1)                b+=around(grid,i,j,n)        return sum1*6-a*2-bs=Solution()grid=[]print(s.surfaceArea(grid))